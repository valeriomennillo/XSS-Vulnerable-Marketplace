{"description":"","goal":"<p>Scovare vulnerabilit&agrave; XSS</p>\n<p>Homepage @ <a href=\"http://localhost:801/\">http://localhost:801/</a></p>\n<p>PHPMyAdmin @ <a href=\"http://localhost:3307/\">http://localhost:3307/</a> (dati di accesso: Server: db, Username: root, Password: password)</p>\n<p>&nbsp;</p>","solution":"<p><span style=\"font-size: medium;\"><span style=\"color: #000000; font-family: 'Times New Roman'; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;\">Esistono diverse forme di XSS:</span></span></p>\n<ol style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\">\n<li>Reflected XSS: &egrave; il tipo pi&ugrave; comune di XSS e si verifica quando l'input dell'utente viene immediatamente restituito dal sito web e visualizzato nella pagina senza prima essere correttamente filtrato o codificato.</li>\n<li>Stored XSS &egrave; un tipo di attacco XSS in cui un utente immette un input maligno in una pagina web che viene quindi memorizzato permanentemente sul server e visualizzato ogni volta che un altro utente accede alla pagina web interessata. Questo tipo di attacco si verifica quando i dati immessi dall'utente non vengono adeguatamente validati o sanitizzati prima di essere memorizzati sul server. Ad esempio, se un utente immette un input maligno in un form di un sito web che viene quindi memorizzato nel database del sito, ogni volta che un altro utente accede alla pagina web che utilizza i dati memorizzati, sta eseguendo codice maligno sul suo browser.</li>\n<li>DOM-based XSS (o client XSS): questo tipo di XSS si verifica quando il codice malevolo viene eseguito a livello del Document Object Model (DOM) del browser, invece che riflesso dal server.</li>\n<li>Self XSS &egrave; un tipo di attacco in cui un utente involontariamente esegue codice maligno immesso da se stesso. Questo tipo di attacco si verifica quando un utente immette del codice dannoso in un<span style=\"font-family: symbol;\">'a</span>rea di input, ad esempio in un form di un sito web, che viene poi visualizzato dalla pagina web come contenuto trusted. L'utente potrebbe non essere consapevole che sta eseguendo codice maligno, ma il risultato &egrave; comunque la compromissione della sicurezza del suo browser.</li>\n</ol>\n<p><span style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;\">Il marketplace offre varie funzionalit&agrave;: login, registrazione, ricerca e visione degli utenti registrati. Il sito &egrave; stato progettato per avere vulnerabilit&agrave; di tipo XSS. Le funzionalit&agrave; del sito e le relative vulnerabilit&agrave; vengono di seguito introdotte e spiegate. Si osserva come il sito potrebbe essere vulnerabile anche ad altri tipi di attacco oltre XSS ma ci si &egrave; concentrati su tale vulnerabilit&agrave;. Per ogni vulnerabilit&agrave; si mostrer&agrave; cosa succede dal punto di vista dell'</span><span style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;\">attaccante e da quello della vittima.</span></p>\n<hr style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\" />\n<p style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"><a name=\"toc.1\"></a></p>\n<h1 style=\"color: #000000; font-family: 'Times New Roman'; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"><a name=\"toc.1\"></a>1&nbsp;Reflected XSS<span style=\"font-size: medium;\"><a style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\" name=\"toc.1\"></a></span></h1>\n<h2 style=\"color: #000000; font-family: 'Times New Roman'; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"><a name=\"toc.1.1\"></a>1.1&nbsp;POV: Attaccante</h2>\n<p><a style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\" name=\"toc.1.1\"></a>L'attaccante, in mala fede, interagisce con i form di input del sito e osserva che quando premuto il bottone Search, viene sparata a video la stringa scritta nella text box. Nell'esempio di seguito, &egrave; stata sottoposta alla ricerca la keyword \"iphone\". L'attaccante, quindi, prova ad inserire uno script in tale text box del tipo &lt;script&gt;alert(\"hello\")&lt;/script&gt; e nota che, una volta cliccato il bottone Search, il server ritorna il payload incriminato scatenando un attacco di tipo XSS riflesso. Una volta individuata la vulnerabilit&agrave;, l'attaccante costruisce ad arte il link da mandare alla vittima http://localhost:801/search_product.php?q= &lt;script&gt;alert(\"hello\")&lt;/script&gt; L'attacco &egrave; causato dal seguente codice php:</p>\n<p><a style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\" name=\"toc.1.1\"></a>q = _GET['q'];</p>\n<p><a style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\" name=\"toc.1.1\"></a>echo \"&lt;p&gt; You searched for &lt;b&gt;\" . $q . \"&lt;/b&gt;&lt;/p&gt;\";</p>\n<p>Quando la vittima preme sul link, il client chiede al server una risorsa e il server popola la pagina dinamicamente compiendo la ricerca mostrando a video i risultati e la stringa di input passata come parametro GET HTTP. Avendo \"riflesso\" al mittente (client) il payload, si parla di XSS riflesso.</p>\n<p><span style=\"font-size: medium;\"><a style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\" name=\"toc.1.1\"></a></span></p>\n<p style=\"color: #000000; font-family: 'Times New Roman'; font-size: medium; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"><a name=\"toc.1.1\"></a><a name=\"toc.1.2\"></a></p>\n<h2 style=\"color: #000000; font-family: 'Times New Roman'; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;\"><a name=\"toc.1.2\"></a>1.2&nbsp;POV: Vittima</h2>\n<p><a name=\"toc.1.2\"></a>La vittima preme sul link di un messaggio esca e scatena l'attacco.</p>\n<hr />\n<p><a name=\"toc.1.2\"></a></p>\n<p><a name=\"toc.1.2\"></a><a name=\"toc.2\"></a></p>\n<h1><a name=\"toc.2\"></a>2&nbsp;Stored XSS</h1>\n<p><a name=\"toc.2\"></a>&Egrave; possibile registrarsi al sito tramite l'apposita pagina di registrazione. A valle della registrazione, sar&agrave; poi possibile loggare nel sistema, immettendo le giuste credenziali. Quando il client manda una richiesta al server, insieme alla risposta al client viene inviato un \"cookie di sessione\". In questo modo, ogni volta che un client presenter&agrave; una richiesta con quel cookie, il PHP sapr&agrave; in quale file sono contenute la variabili relative a quella sessione, ripristinandole.</p>\n<p><a name=\"toc.2\"></a><a name=\"toc.2.1\"></a></p>\n<h2><a name=\"toc.2.1\"></a>2.1&nbsp;POV: Attaccante</h2>\n<p><a name=\"toc.2.1\"></a>Ricordando il modus operandi precedente, l'attaccante gioca con i controlli del sito e nota che &egrave; possibile registrarsi (register.php) inserendo al posto di un normale nome, uno script javascript. Se l'attaccante riesce a registrarsi con successo, la tabella del database degli utenti verr&agrave; aggiornata inserendo il nuovo utente. Non avendo previsto meccanismi di difesa contro attacchi quali stored XSS, tale attacco ha successo sul sito.</p>\n<p><a name=\"toc.2.1\"></a><a name=\"toc.2.2\"></a></p>\n<h2><a name=\"toc.2.2\"></a>2.2&nbsp;POV: Vittima</h2>\n<p><a name=\"toc.2.2\"></a>Una delle pagine del marketplace &egrave; all_users.php che mostra tutti gli utenti registrati alla piattaforma. Dopo che l'attaccante registra un utente inserendo al posto di un nome uno script, chiunque richieda al server la lista di tutti gli utenti iscritti al sito scatener&agrave; lo script contenuto nel campo \\verb|first<sub>n</sub>ame|. Se si preme su \"OK\", notiamo come per l'user cattivone non sembra esserci alcun nome corrispondente. Tale situazione &egrave; causata dal fatto che il nome &egrave; proprio il payload d'attacco che &egrave; stato interpretato dal browser. Nel nostro caso, ai fini didattici, lo script genera un alert video. In scenari reali, &egrave; difficile che uno script XSS generi un alert video ma piuttosto &egrave; realistico pensare che facciano compiere azioni specifiche all'utente, potenzialmente senza che egli se ne accorga.</p>\n<hr />\n<p><a name=\"toc.2.2\"></a></p>\n<p><a name=\"toc.2.2\"></a><a name=\"toc.3\"></a></p>\n<h1><a name=\"toc.3\"></a>3&nbsp;DOM<span style=\"font-family: symbol;\">-</span>Based XSS</h1>\n<p><a name=\"toc.3\"></a>Nella pagina iniziale, \"region\" &egrave; una variabile che viene utilizzata per impostare la regione corrente per l'utente. Se non viene passato alcun valore \"region\" come parametro nell'URL, allora viene impostato il valore predefinito \"IT\" e viene aggiunto come parametro nell'URL. La variabile \"region\" viene poi visualizzata sulla pagina web utilizzando il metodo document.write. A differenza del metodo document.getElementById(\"region\").innerHTML, document.write &egrave; vulnerabile ad attacchi XSS. Il parametro HTTP \"region\" viene gestito client<span style=\"font-family: symbol;\">-</span>side e per questo si parla anche di client XSS.</p>\n<p><a name=\"toc.3\"></a><a name=\"toc.3.1\"></a></p>\n<h2><a name=\"toc.3.1\"></a>3.1&nbsp;POV: Attaccante</h2>\n<p><a name=\"toc.3.1\"></a>L'Attaccante prova manualmente a cambiare i valori di region finch&eacute; non scopre che &egrave; possibile iniettare l&igrave; uno script. Una volta capito che il sito &egrave; vulnerabile, l'attaccante crea ad arte un link contenente payload di attacco, come ad esempio: http://localhost:801/index.php?region=&lt;script&gt;alert(\"dombased xss!\");&lt;/script&gt;. La ragione per cui &egrave; possibile causare questo attacco &egrave; dovuto alla funzione document.write citata precedentemente.</p>\n<hr />\n<p><a name=\"toc.3.1\"></a></p>\n<h2><a name=\"toc.3.2\"></a>3.2&nbsp;POV: Vittima</h2>\n<p><a name=\"toc.3.2\"></a>Similmente a quanto visto precedentemente nello scenario di XSS riflesso, la vittima preme su un link inviatogli ad esempio tramite mail o servizi di messaggistica istantanea. http://localhost:801/index.php?region=&lt;script&gt;alert(\"dombased xss!\");&lt;/script&gt;</p>\n<hr />\n<p><a name=\"toc.3.2\"></a></p>","readme":"","author":"vm"}
